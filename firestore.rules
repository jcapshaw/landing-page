rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null && request.auth.uid != null;
    }
    
    function hasRole(role) {
      return isSignedIn() && request.auth.token.role == role;
    }
    
    function isAdmin() {
      return hasRole('admin');
    }
    
    function isManager() {
      return hasRole('manager');
    }
    
    function isSalesPerson() {
      return hasRole('salesperson');
    }
    
    function hasAdminAccess() {
      return isAdmin();
    }
    
    function hasManagerAccess() {
      return isAdmin() || isManager();
    }
    
    function hasReadAccess() {
      return isSignedIn(); // All authenticated users can read
    }
    
    function hasWriteAccess() {
      return isAdmin() || isManager(); // Only admin and managers can write
    }
    
    function isValidDailyLogEntry() {
      let requiredFields = [
        'date', 'hasAppointment', 'salesperson', 'stockNumber', 
        'voi', 'hasTrade', 'customerPhone', 'status', 'customerName'
      ];
      
      let hasAllRequiredFields = requiredFields.hasAll(request.resource.data.keys());
      
      let hasValidStatus = request.resource.data.status in ['SOLD!', 'DEPOSIT', 'NO DEAL', 'PENDING'];
      let hasValidAppointment = request.resource.data.hasAppointment in ['YES', 'NO'];
      let hasValidTrade = request.resource.data.hasTrade in ['YES', 'NO'];
      
      return hasAllRequiredFields && hasValidStatus && hasValidAppointment && hasValidTrade;
    }
    
    function isValidVehicle() {
      // Add validation for vehicle data structure
      return request.resource.data.keys().hasAny(['stockNumber', 'make', 'model']);
    }
    
    function isValidProspect() {
      // Add validation for prospect data structure
      return request.resource.data.keys().hasAny(['name', 'phone']);
    }
    
    // Prospects collection
    match /prospects/{prospectId} {
      allow read: if hasReadAccess();
      allow create: if hasWriteAccess() && isValidProspect();
      allow update: if hasWriteAccess() && isValidProspect();
      allow delete: if hasAdminAccess(); // Only admins can delete prospects
    }
    
    // Vehicles collection
    match /vehicles/{vehicleId} {
      allow read: if hasReadAccess();
      allow create: if hasWriteAccess() && isValidVehicle();
      allow update: if hasWriteAccess() && isValidVehicle();
      allow delete: if hasAdminAccess(); // Only admins can delete vehicles
    }
    
    // Daily Logs collection
    match /dailyLogs/{logId} {
      allow read: if hasReadAccess();
      allow create: if hasWriteAccess() && isValidDailyLogEntry();
      allow update: if hasWriteAccess() && isValidDailyLogEntry();
      allow delete: if hasAdminAccess(); // Only admins can delete logs
    }
    
    // Board Deals collection
    match /boardDeals/{dealId} {
      allow read: if hasReadAccess();
      allow create: if hasWriteAccess();
      allow update: if hasWriteAccess();
      allow delete: if hasAdminAccess(); // Only admins can delete deals
    }
    
    // Users collection - for storing user roles and profiles
    match /users/{userId} {
      // Users can read and update their own profile
      allow read: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      
      // Only admins can read all user profiles, create new ones, or delete them
      allow read, create, delete: if hasAdminAccess();
      
      // Only admins can update roles
      allow update: if hasAdminAccess() ||
                     (isSignedIn() && request.auth.uid == userId &&
                      (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role'])));
    }
    
    // Deny access to all other collections by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}